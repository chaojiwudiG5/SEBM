name: Java CI with SNYK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup-build:
    name: Setup & Build
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build project (skip tests)
        run: mvn clean verify -DskipTests

  lint-check:
    name: Lint Check (Checkstyle)
    runs-on: ubuntu-latest
    needs: setup-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Checkstyle Lint
        run: mvn checkstyle:checkstyle

      - name: Upload Checkstyle Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: target/site/checkstyle.html

  snyk-sca:
    name: Snyk SCA Scan
    runs-on: ubuntu-latest
    needs: lint-check
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk SCA scan
        run: snyk test --all-projects --severity-threshold=high

  snyk-sast:
    name: Snyk SAST Scan
    runs-on: ubuntu-latest
    needs: lint-check
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk Code (SAST) scan
        run: snyk code test --severity-threshold=high

      - name: Monitor project in Snyk
        run: snyk monitor --all-projects

  test-and-coverage:
    name: Run Unit Tests & Upload Coverage
    runs-on: ubuntu-latest
    needs: [snyk-sca, snyk-sast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Unit Tests and generate Jacoco report
        run: mvn clean verify

      - name: Upload Test Results & Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/
            **/target/site/checkstyle.html
  dast-scan:
    name: DAST Security Scan (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: test-and-coverage
    env:
      SPRING_PROFILES_ACTIVE: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Start Spring Boot application in background
        run: |
          echo "Starting application with DAST profile on port 29578..."
          nohup java -jar target/*.jar \
            --spring.profiles.active=dast \
            > app.log 2>&1 &
          echo $! > app.pid
          echo "Application PID: $(cat app.pid)"
          echo "Waiting 15 seconds for initial startup..."
          sleep 15
          echo "Checking if process is still running..."
          if ps -p $(cat app.pid) > /dev/null; then
            echo "✓ Application process is running"
          else
            echo "✗ Application process has stopped"
            cat app.log
            exit 1
          fi

      - name: Wait for application to be ready
        run: |
          echo "=== Application Log (first 100 lines) ==="
          head -100 app.log || true
          echo "=== End of initial log ==="
          echo ""
          echo "Testing connectivity..."
          
          MAX_ATTEMPTS=20
          ATTEMPT=0
          SUCCESS=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo ""
            echo "[$ATTEMPT/$MAX_ATTEMPTS] Testing endpoints..."
          
            # 检查进程是否还在运行
            if ! ps -p $(cat app.pid) > /dev/null 2>&1; then
              echo "❌ Application process has died!"
              echo "=== Full application log ==="
              cat app.log
              exit 1
            fi
          
            # 尝试多个可能的端点
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:29578 2>/dev/null || echo "000")
            echo "HTTP Status for /: $HTTP_CODE"
          
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "403" ] || [ "$HTTP_CODE" = "404" ]; then
              echo "✓ Application is responding!"
              echo "Testing with curl -v:"
              curl -v http://localhost:29578 2>&1 | head -30
              SUCCESS=true
              break
            fi
          
            # 尝试API端点
            API_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:29578/api 2>/dev/null || echo "000")
            echo "HTTP Status for /api: $API_CODE"
          
            if [ "$API_CODE" = "200" ] || [ "$API_CODE" = "401" ] || [ "$API_CODE" = "403" ] || [ "$API_CODE" = "404" ]; then
              echo "✓ Application API is responding!"
              SUCCESS=true
              break
            fi
          
            if [ $ATTEMPT -eq 5 ] || [ $ATTEMPT -eq 10 ] || [ $ATTEMPT -eq 15 ]; then
              echo "=== Application log tail (attempt $ATTEMPT) ==="
              tail -30 app.log || true
              echo "==="
            fi
          
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo ""
              echo "❌ Application failed to start within expected time"
              echo ""
              echo "=== Full Application Log ==="
              cat app.log
              echo ""
              echo "=== Network check ==="
              netstat -tlnp 2>/dev/null | grep 29578 || echo "Port 29578 not listening"
              exit 1
            fi
          
            sleep 3
          done
          
          if [ "$SUCCESS" = "true" ]; then
            echo ""
            echo "✓✓✓ Application is ready for DAST scanning! ✓✓✓"
          fi

      - name: Create ZAP rules configuration
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv << 'EOF'
          # ZAP Scanning Rules - Relaxed Mode (不会导致CI失败)
          # Use this file to configure which rules to include/exclude
          # Format: RULE_ID	THRESHOLD	[COMMENT]
          # THRESHOLD: IGNORE(忽略) < INFO(信息) < WARN(警告) < FAIL(失败)
          
          # 严重安全问题 - 仅报告，不失败构建
          10028	WARN	# Open Redirect
          10029	WARN	# Cookie Poisoning
          10033	WARN	# Directory Browsing
          10043	WARN	# User Controllable JavaScript Event (XSS)
          10045	WARN	# Source Code Disclosure - /WEB-INF folder
          10046	WARN	# Insecure HTTP Method
          10048	WARN	# Remote Code Execution - Shell Shock
          10062	WARN	# PII Disclosure
          10099	WARN	# Source Code Disclosure
          10105	WARN	# Weak Authentication Method
          
          # 一般安全问题 - 仅作为信息提示
          10021	INFO	# X-Content-Type-Options header missing
          10023	INFO	# Information Disclosure - Debug Error Messages
          10025	INFO	# Information Disclosure - Sensitive Information in URL
          10027	INFO	# Information Disclosure - Suspicious Comments
          10031	INFO	# User Controllable Charset
          10032	INFO	# Viewstate Scanner
          10034	INFO	# Cloud Metadata Potentially Exposed
          10035	INFO	# Strict-Transport-Security Header Not Set
          10036	INFO	# HTTP Server Response Header
          10037	INFO	# Server Leaks Information via "X-Powered-By"
          10038	INFO	# Content Security Policy (CSP) Header Not Set
          10039	INFO	# X-Backend-Server Header Information Leak
          10040	INFO	# Secure Pages Include Mixed Content
          10041	INFO	# HTTP to HTTPS Insecure Transition in Form Post
          10042	INFO	# HTTPS to HTTP Insecure Transition in Form Post
          10044	INFO	# Big Redirect Detected
          10047	INFO	# HTTPS Content Available via HTTP
          10049	INFO	# Content Cacheability
          10050	INFO	# Retrieved from Cache
          10051	INFO	# Relative Path Confusion
          10052	INFO	# X-ChromeLogger-Data (XCOLD) Header Information Leak
          10054	INFO	# Cookie without SameSite Attribute
          10055	INFO	# CSP Scanner
          10056	INFO	# X-Debug-Token Information Leak
          10057	INFO	# Username Hash Found
          10061	INFO	# X-AspNet-Version Response Header
          10063	INFO	# Permissions Policy Header Not Set
          10096	INFO	# Timestamp Disclosure
          10097	INFO	# Hash Disclosure
          10098	INFO	# Cross-Domain Misconfiguration
          10106	INFO	# HTTP Only Site
          10107	INFO	# Httpoxy - Proxy Header Misuse
          10108	INFO	# Reverse Tabnabbing
          10109	INFO	# Modern Web Application
          10110	INFO	# Dangerous JS Functions
          EOF

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:29578'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -I'
          fail_action: false
          allow_issue_writing: false
        continue-on-error: true
        timeout-minutes: 10

      - name: OWASP ZAP Full Scan (API endpoints)
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:29578'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 5'
          fail_action: false
          allow_issue_writing: false
        continue-on-error: true
        timeout-minutes: 15
        if: success() || failure()

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

      - name: Upload ZAP scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-zap-reports
          path: |
            report_html.html
            report_md.md
            report_json.json
          if-no-files-found: warn
          retention-days: 30

      - name: Generate DAST Summary
        if: always()
        run: |
          echo "# DAST Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## OWASP ZAP Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Target: http://localhost:29578" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f report_md.md ]; then
            cat report_md.md >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No ZAP report generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Full reports are available in the artifacts section" >> $GITHUB_STEP_SUMMARY