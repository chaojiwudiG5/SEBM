name: Java CI with SYNK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-scan:
    name: Build & SNYK scan
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILES_ACTIVE: prod
      TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
      TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
      TENCENT_REGION: ${{ secrets.TENCENT_REGION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      # 1.缓存maven依赖
      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # 2.编译项目
      - name: Build with Maven
        run: mvn clean verify -DskipTests
      # 3. 安装 Snyk CLI
      - name: Install Snyk CLI
        run: npm install -g snyk

      # 4. 使用 Snyk 进行依赖漏洞扫描 (SCA)
      - name: Run Snyk SCA scan
        run: snyk test --all-projects --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 5. 使用 Snyk 进行源代码漏洞扫描 (SAST)
      - name: Run Snyk Code (SAST) scan
        run: snyk code test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 6. 运行单元测试
      - name: Run Unit Tests and generate Jacoco report
        run: mvn clean verify

      - name: Upload Test Results (JUnit + Jacoco)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/
            

      - name: SonarQube Scan
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=chaojiwudiG5_SEBM \
            -Dsonar.organization=chaojiwudig5 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          
          
          
      # 7. 运行 Snyk Code (源代码安全 lint)，过于严格，建议注释掉
      #      - name: Snyk Code Scan
      #        run: snyk code test
      #        env:
      #          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # 8. 可选：上传结果到 Snyk 平台


      - name: Monitor project in Snyk
        run: snyk monitor --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  dast-scan:
    name: DAST Security Scan (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build-and-scan
    env:
      SPRING_PROFILES_ACTIVE: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Start Spring Boot application in background
        run: |
          java -jar target/*.jar --server.port=8080 &
          echo $! > app.pid
          echo "Application PID: $(cat app.pid)"
        env:
          SPRING_PROFILES_ACTIVE: test
          # 使用H2内存数据库进行测试
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
          SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.H2Dialect

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null || curl -f http://localhost:8080 2>/dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 5
          done

      - name: Create ZAP rules configuration
        run: |
          mkdir -p .zap
          cat > .zap/rules.tsv << 'EOF'
          # ZAP Scanning Rules
          # Use this file to configure which rules to include/exclude
          # Format: RULE_ID	THRESHOLD	[COMMENT]
          
          # High priority rules (always scan)
          10021	WARN	# X-Content-Type-Options header missing
          10023	WARN	# Information Disclosure - Debug Error Messages
          10025	WARN	# Information Disclosure - Sensitive Information in URL
          10027	WARN	# Information Disclosure - Suspicious Comments
          10028	WARN	# Open Redirect
          10029	WARN	# Cookie Poisoning
          10031	WARN	# User Controllable Charset
          10032	WARN	# Viewstate Scanner
          10033	WARN	# Directory Browsing
          10034	WARN	# Cloud Metadata Potentially Exposed
          10035	WARN	# Strict-Transport-Security Header Not Set
          10036	WARN	# HTTP Server Response Header
          10037	WARN	# Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
          10038	WARN	# Content Security Policy (CSP) Header Not Set
          10039	WARN	# X-Backend-Server Header Information Leak
          10040	WARN	# Secure Pages Include Mixed Content
          10041	WARN	# HTTP to HTTPS Insecure Transition in Form Post
          10042	WARN	# HTTPS to HTTP Insecure Transition in Form Post
          10043	WARN	# User Controllable JavaScript Event (XSS)
          10044	WARN	# Big Redirect Detected (Potential Sensitive Information Leak)
          10045	WARN	# Source Code Disclosure - /WEB-INF folder
          10046	WARN	# Insecure HTTP Method
          10047	WARN	# HTTPS Content Available via HTTP
          10048	WARN	# Remote Code Execution - Shell Shock
          10049	WARN	# Content Cacheability
          10050	WARN	# Retrieved from Cache
          10051	WARN	# Relative Path Confusion
          10052	WARN	# X-ChromeLogger-Data (XCOLD) Header Information Leak
          10054	WARN	# Cookie without SameSite Attribute
          10055	WARN	# CSP Scanner
          10056	WARN	# X-Debug-Token Information Leak
          10057	WARN	# Username Hash Found
          10061	WARN	# X-AspNet-Version Response Header
          10062	WARN	# PII Disclosure
          10063	WARN	# Permissions Policy Header Not Set
          10096	WARN	# Timestamp Disclosure
          10097	WARN	# Hash Disclosure
          10098	WARN	# Cross-Domain Misconfiguration
          10099	WARN	# Source Code Disclosure
          10105	WARN	# Weak Authentication Method
          10106	WARN	# HTTP Only Site
          10107	WARN	# Httpoxy - Proxy Header Misuse
          10108	WARN	# Reverse Tabnabbing
          10109	WARN	# Modern Web Application
          10110	WARN	# Dangerous JS Functions
          EOF

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -I'
          fail_action: false
          allow_issue_writing: false

      - name: OWASP ZAP Full Scan (API endpoints)
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'
          fail_action: false
          allow_issue_writing: false
        continue-on-error: true

      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

      - name: Upload ZAP scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_html.html
            report_md.md
            report_json.json

      - name: Generate DAST Summary
        if: always()
        run: |
          echo "# DAST Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## OWASP ZAP Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Target: http://localhost:8080" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f report_md.md ]; then
            cat report_md.md >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No ZAP report generated" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Full reports are available in the artifacts section" >> $GITHUB_STEP_SUMMARY