
- 按照其它业务模块（例如 `Device`）的分层方式，Maintenance 已经预设了 `controller`、`dao`、`entity`、`service` 四层骨架，并和 MyBatis-Plus 的 `BaseMapper`/`ServiceImpl` 接口保持一致。`DeviceController` 与 `DeviceServiceImpl` 展示了当前项目常用的控制器返回类型（`BaseResponse` 包裹业务数据）、认证注解（`@AuthCheck`）、以及服务层的实现风格。 【F:src/main/java/group5/sebm/Device/controller/DeviceController.java†L1-L72】【F:src/main/java/group5/sebm/Device/service/DeviceServiceImpl.java†L1-L121】
- Maintenance 模块的实体对象 `UserMaintenanceRecordPo` 与 `MechanicanMaintenanceRecordPo` 已映射到 `userMaintenanceRecord`、`mechanicanMaintenanceRecord` 两张表，包含设备 ID、报修/维修人员 ID、描述、图片、状态、逻辑删除标记以及时间戳字段。 【F:src/main/java/group5/sebm/Maintenance/entity/UserMaintenanceRecordPo.java†L1-L44】【F:src/main/java/group5/sebm/Maintenance/entity/MechanicanMaintenanceRecordPo.java†L1-L44】

1. **Controller 层**：
   - 针对用户侧（上报故障）与技工侧（处理维修单）分别暴露 RESTful 接口；延续项目现有的响应封装（`ResultUtils.success()`）、Swagger 注解以及角色校验注解。 【F:src/main/java/group5/sebm/common/ResultUtils.java†L1-L49】【F:src/main/java/group5/sebm/annotation/AuthCheck.java†L1-L16】
   - 典型接口：分页查询、详情、创建/更新、状态流转、逻辑删除（可复用 `DeleteDto`）。分页参数可直接使用用户模块的 `PageDto` 并加上 `@Valid`。 【F:src/main/java/group5/sebm/User/controller/dto/PageDto.java†L1-L32】【F:src/main/java/group5/sebm/common/dto/DeleteDto.java†L1-L16】
2. **Service 层**：
   - 在 `services` 接口中声明面向业务的能力（例如 `createReport`、`updateStatus`、`listByCondition` 等），并在 `ServiceImpl` 中通过 `ServiceImpl` 基类提供的 CRUD 能力与自定义查询包装完成逻辑。
   - 需要处理的关键逻辑包括：
     - 用户提交维修单时补充设备/用户合法性校验、初始化状态、生成时间戳。
     - 技工接单、更新状态时的状态流转校验（枚举或常量约束）。
     - 查询时根据当前用户角色过滤（例如用户只能看到自己的报单，技工可按状态筛选待处理订单）。
     - 逻辑删除应当通过更新 `isDelete` 字段而非物理删除。
3. **DAO 层**：
   - 在当前的 `Mapper` 接口上补充必要的自定义查询方法（如根据状态、角色分页查询）。优先利用 MyBatis-Plus 的 `LambdaQueryWrapper`/`QueryWrapper`，复杂场景再考虑 XML 映射。

## 建议的数据传输对象
- **用户提交/编辑报修单 DTO**：包含设备 ID、故障描述、图片、联系方式等字段，并结合 Jakarta Validation 校验必填字段。
- **技工处理维修单 DTO**：包含维修单 ID、处理描述、状态更新、维修图片等内容。
- **列表/详情 VO**：在实体基础上补充展示需要的用户姓名、设备名称等（可通过关联查询或在服务层拼装）。

## 典型流程示例
1. 用户调用 `/userMaintenanceRecord/create` 接口：Controller 接收 DTO -> 校验 -> 调用 `UserMaintenanceRecordService#createReport` -> Service 内使用 Mapper `insert` 并返回生成的 ID。
2. 技工调用 `/mechanicanMaintenanceRecord/claim` 接口接单：Controller 通过 `@AuthCheck(mustRole = "mechanic")` 限制角色 -> Service 校验当前状态为“待处理” -> 更新状态为“处理中”，记录技工 ID。
3. 处理完成调用 `/mechanicanMaintenanceRecord/complete`：在 Service 中校验状态流转、保存处理描述与图片、写入完成时间。
4. 查询接口使用 `PageDto` 构造 `Page<Po>`，并转换为 `VO` 返回前端，参考设备模块的分页实现模式。 【F:src/main/java/group5/sebm/Device/service/DeviceServiceImpl.java†L33-L63】

## 其他注意事项
- 按照全局异常与响应体系，非法状态流转、权限不足等情况通过抛出项目自带的业务异常并由 `GlobalExceptionHandler` 统一处理。
- 根据需要在 `resources/mapper` 下补充 MyBatis XML；但优先尝试 `QueryWrapper` 方式以保持与现有模块一致。
- 若需要鉴权信息（当前用户 ID），复用现有的 JWT 拦截器与上下文工具，从 `JwtInterceptor` 已注入的逻辑中获取。之后可在 Service 中引入一个 UserContext 或从拦截器保存的 ThreadLocal 获取。 【F:src/main/java/group5/sebm/interceptors/JwtInterceptor.java†L1-L44】